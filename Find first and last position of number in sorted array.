class Solution {
    public int[] searchRange(int[] nums, int target) {
        if(nums.length==0 || nums==null){
            return new int[]{-1,-1};
        }

        int first = binarysearchfirst(nums,target);
        if(first==-1){
            return new int[]{-1,-1};
        }
        
        int second = binarysearchlast(nums,target);
        return new int[]{first,second};
    }

    private int binarysearchfirst(int nums[],int target){
        int low = 0;
        int high = nums.length-1;
        while(low<=high){
            int mid = low + (high-low)/2;
            if(nums[mid]==target){
                if(low==mid || nums[mid-1]!=nums[mid]){
                    return mid;
                }
                high=mid-1;
            }
            else{
                if(nums[mid]<target){
                    low=mid+1;
                }
                else{
                    high=mid-1;
                }
            }
        }return -1;
    }



    private int binarysearchlast(int nums[],int target){
        int low = 0;
        int high = nums.length-1;
        while(low<=high){
            int mid = low + (high-low)/2;
            if(nums[mid]==target){
                if(high==mid || nums[mid]!=nums[mid+1]){
                    return mid;
                }
                low=mid+1;
            }
            else{
                if(nums[mid]<target){
                    low=mid+1;
                }
                else{
                    high=mid-1;
                }
            }
        }return -1;
    }
}
